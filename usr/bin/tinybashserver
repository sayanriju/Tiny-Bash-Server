#!/usr/bin/env bash

DOCROOT="$1"
DEFAULT_INDEX="$2"
DOCROOT=${DOCROOT:-"/var/www/"}
DEFAULT_INDEX=${DEFAULT_INDEX:-"index.html"}

function parseHttpRequest(){
	read init_req_line
	local line=''
	local cont_len=0
	while /bin/true; do
	  read line
	  [ "$line" = $'\r' ] && break;
	  if [[ "$line" =~ ^Content-Length ]];then
		# MUST strip the CRLF to get integer value
		cont_len=`echo -e "$line" |tr -d '\r' | cut -d: -f2`
	  fi
	  header="$header\n$line"
	done
	header="${header#??}"

	if [[ "$init_req_line" =~ ^POST ]];then	# POST method; get message body & set var $method
		method="POST"
		body=''
		IFS=''
		# If there is matter in msg body, get it for QUERY_STRING
		[ "$cont_len" -ne 0 ] && read -n $cont_len body;
		body=${body//+/}	# Remove + sign from body (in form field submission with space)
		unset IFS
	elif [[ "$init_req_line" =~ ^GET ]] ;then			# GET method; set var $method
		method="GET"
	else
		method=""										# Unknown method
	fi
}
function parseRequestUrl(){
	query_str=''
	if [ "$method" == "POST" ];then		# POST
		url="${init_req_line#POST }"
		query_str="$body"		
	else 						# GET
		url="${init_req_line#GET }"
		echo "$url" | grep -q "?"
		[ $? -eq 0 ]  && query_str="${url/*\?/}"
	fi
	url="${url% HTTP/*}"
	url="${url#/}"
	url="${url/\?*/}"
	query_str="${query_str% HTTP/*}"
	#query_str="${query_str//&/&&}"
}
function createVariableString(){
	local v1=`echo -e "$header"|grep "^Host"`
	local hn="${v1#*:}"
	hn=${hn// /}
	local ua=`echo -e "$header"|grep "^User-Agent"`
	var_str="DOCUMENT_ROOT=\"$DOCROOT\"&&HTTP_HOST=\"$hn\"&&HTTP_USER_AGENT=\"$ua\"&&QUERY_STRING=\"$query_str\"&&REQUEST_METHOD=\"$method\"&&REQUEST_URI=\"$url\""
}
# NOTE: don't use HTTP/1.1 if you have any sub process in your script page (htsh,sh)
function commonHeader(){
	echo -e "HTTP/1.0 $1 $2"	
	echo -e "Date:" `date`
	echo -e "Server: Tiny Bash Server"
}
function aboutMe(){
	local v1=`echo -e "$header"|grep "^Host"`
	local hn="${v1#*:}"	
	echo -e "<br/><br/><hr/><i>Tiny Bash Server running at" ${hn:-`hostname`} "</i>"
}
function errorResponse(){
	local code="$1"
	local err=""
	local msg="The request couldn't be processed by this server"
	case "$code" in
		400) err="Bad Request";msg="Your browser sent a request that this server could not understand.";;
		403) err="Forbidden";msg="You do not have permissions to access the requested resource";;
		404) err="Not Found";msg="The requested resource was not found on this server";;
		500) err="Internal Server Error";;
		501) err="Not Implemented";;
		*)   err="Internal Server Error";;
	esac
	commonHeader "$code" "$err"
	cat <<EOF
Content-Type: text/html

<head> <title> $code $err </title> </head>
<h1> $code $err </h1> 
$msg
EOF
	aboutMe
	echo -e "\r"
}
## Main
parseHttpRequest
parseRequestUrl
createVariableString
## Handle urlencoded url
function urlencode() {
	# urlencode <string>
	old_lc_collate=$LC_COLLATE
	LC_COLLATE=C
	local length="${#1}"
	for (( i = 0; i < length; i++ )); do
		local c="${1:i:1}"
		case $c in
			[a-zA-Z0-9.~_-])
				printf "$c" ;;
			*)
				printf '%%%02X' "'$c" ;;
		esac
	done
	LC_COLLATE=$old_lc_collate
}
function urldecode() {
	# urldecode <string>
	local url_encoded="${1//+/ }"
	printf '%b' "${url_encoded//%/\\x}"
}
url=`urldecode "$url"`
filename="$DOCROOT$url"
if [ -d "$filename" ];then
	filename="$filename/$DEFAULT_INDEX"
fi
# Is there an error?
if [ -z "$method" ];then
	errorResponse "400"
	exit 400
fi
if [ ! -f "$filename" ];then
	errorResponse "404"
	exit 404
fi
if [ ! -r "$filename" ];then
	errorResponse "403"
	exit 403
fi
# All ok
commonHeader "200" "OK"
case "${filename##*.}" in
	"htsh") echo -e "Content-Type: text/html\r"
			echo -e "\r"
			/usr/bin/htsh "$filename" "$var_str" #"`echo $var_str`"				
	;;
	"sh") 	echo -e "Content-Type: text/html\r"
			echo -e "\r"
			/bin/bash "$filename" "`echo $var_str`"
	;;
	"html") echo -e "Content-Type: text/html\r"
			echo -e "\r"
			cat "$filename"		
	;;
	"php")  echo -e "Content-Type: text/html\r"
			echo -e "\r"
			/usr/bin/php "$filename" "`echo $var_str`"
	;;
	"py")  echo -e "Content-Type: text/html\r"
			echo -e "\r"
			/usr/bin/python "$filename"		
	;;
	*)	echo -e "Content-Type: `/usr/bin/file -bi \"$filename\"`\r"
		echo -e "\r"
		cat "$filename"
	;;
esac
exit 0
